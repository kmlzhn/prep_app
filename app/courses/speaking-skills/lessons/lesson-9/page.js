'use client';

import { UserButton, SignedIn, SignedOut, RedirectToSignIn } from "@clerk/nextjs";
import { useUser } from "@clerk/nextjs";
import Link from 'next/link';
import { useProgress } from '../../../../hooks/useProgress';
import { useState, useEffect, useRef } from 'react';
import SpeakingSkillsSidebar from '../../../../components/SpeakingSkillsSidebar';

export default function Lesson9() {
  const { isLoaded, isSignedIn, user } = useUser();
  const { isLessonCompleted, markLessonComplete } = useProgress();
  const [showCompletion, setShowCompletion] = useState(false);
  const [isCompleting, setIsCompleting] = useState(false);
  
  // Speaking practice states
  const [activeSection, setActiveSection] = useState('part1'); // 'part1', 'part2', 'part3'
  const [isRecording, setIsRecording] = useState(false);
  const [audioBlob, setAudioBlob] = useState(null);
  const [audioURL, setAudioURL] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const [feedback, setFeedback] = useState(null);
  const [timer, setTimer] = useState(0);
  const [isTimerRunning, setIsTimerRunning] = useState(false);
  
  const mediaRecorderRef = useRef(null);
  const audioChunksRef = useRef([]);
  const timerIntervalRef = useRef(null);

  useEffect(() => {
    // Cleanup function
    return () => {
      if (audioURL) URL.revokeObjectURL(audioURL);
      if (timerIntervalRef.current) clearInterval(timerIntervalRef.current);
    };
  }, [audioURL]);

  useEffect(() => {
    if (isTimerRunning) {
      timerIntervalRef.current = setInterval(() => {
        setTimer(prevTimer => prevTimer + 1);
      }, 1000);
    } else if (timerIntervalRef.current) {
      clearInterval(timerIntervalRef.current);
    }

    return () => {
      if (timerIntervalRef.current) clearInterval(timerIntervalRef.current);
    };
  }, [isTimerRunning]);

  if (!isLoaded) {
    return <div className="flex items-center justify-center min-h-screen">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  if (!isSignedIn) {
    return <RedirectToSignIn />;
  }

  const courseSlug = 'speaking-skills';
  const lessonId = 9;
  const completed = isLessonCompleted(courseSlug, lessonId);

  const handleCompleteLesson = () => {
    setIsCompleting(true);
    setTimeout(() => {
      markLessonComplete(courseSlug, lessonId);
      setIsCompleting(false);
      setShowCompletion(true);
      setTimeout(() => {
        setShowCompletion(false);
      }, 3000);
    }, 500);
  };

  const fetchQuestion = async (part) => {
    setIsLoading(true);
    setFeedback(null);
    setAudioBlob(null);
    setAudioURL('');
    
    try {
      // In a real implementation, we would fetch from the API with the part parameter
      // For now, we'll simulate different questions based on the part
      const response = await fetch(`/api/speaking-practice?part=${part}`);
      const data = await response.json();
      
      setCurrentQuestion(data.question);
      setTimer(0);
    } catch (error) {
      console.error('Error fetching question:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorderRef.current = new MediaRecorder(stream);
      audioChunksRef.current = [];

      mediaRecorderRef.current.ondataavailable = (event) => {
        audioChunksRef.current.push(event.data);
      };

      mediaRecorderRef.current.onstop = () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });
        const audioUrl = URL.createObjectURL(audioBlob);
        
        setAudioBlob(audioBlob);
        setAudioURL(audioUrl);
        
        // Stop all tracks from the stream
        stream.getTracks().forEach(track => track.stop());
      };

      mediaRecorderRef.current.start();
      setIsRecording(true);
      setIsTimerRunning(true);
    } catch (error) {
      console.error('Error starting recording:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞.');
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
      setIsTimerRunning(false);
    }
  };

  const analyzeRecording = async () => {
    if (!audioBlob || !currentQuestion) return;

    setIsLoading(true);
    
    try {
      // Convert audioBlob to base64 for sending to API
      const reader = new FileReader();
      reader.readAsDataURL(audioBlob);
      
      reader.onloadend = async () => {
        try {
          const base64Audio = reader.result.split(',')[1];
          
          const response = await fetch('/api/speaking-practice', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              audioData: base64Audio,
              question: currentQuestion.question,
              part: currentQuestion.part
            }),
            // Add timeout to prevent infinite loading
            signal: AbortSignal.timeout(30000) // 30 second timeout
          });
          
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Error analyzing audio');
          }
          
          const data = await response.json();
          
          // Display the transcription along with the feedback
          setFeedback({
            ...data,
            transcription: data.transcription || 'Transcription not available'
          });
        } catch (error) {
          console.error('Error analyzing recording:', error);
          alert('An error occurred while analyzing the recording: ' + (error.message || 'Unknown error'));
        } finally {
          setIsLoading(false);
        }
      };
      
      reader.onerror = () => {
        console.error('Error reading audio file');
        alert('Error reading audio file');
        setIsLoading(false);
      };
    } catch (error) {
      console.error('Error analyzing recording:', error);
      alert('An error occurred while analyzing the recording: ' + error.message);
      setIsLoading(false);
    }
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const renderQuestionContent = () => {
    if (!currentQuestion) {
      return (
        <div className="text-center py-8">
          <p className="text-gray-600">–ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤—ã—à–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å</p>
          <button
            onClick={() => fetchQuestion(activeSection === 'part1' ? 1 : activeSection === 'part2' ? 2 : 3)}
            className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å
          </button>
        </div>
      );
    }

    return (
      <div className="bg-white border border-gray-200 rounded-lg p-6">
        <h4 className="font-semibold text-gray-800 mb-2">–¢–µ–º–∞: {currentQuestion.topic}</h4>
        <p className="text-gray-700 mb-4">{currentQuestion.question}</p>
        
        {currentQuestion.part === 2 && currentQuestion.points && (
          <div className="bg-gray-50 p-4 rounded-lg">
            <p className="text-sm text-gray-600 mb-2">–í–∫–ª—é—á–∏—Ç–µ –≤ –≤–∞—à –æ—Ç–≤–µ—Ç:</p>
            <ul className="list-disc pl-6 text-sm text-gray-600">
              {currentQuestion.points.map((point, index) => (
                <li key={index}>{point}</li>
              ))}
            </ul>
          </div>
        )}
        
        <div className="mt-6">
          <div className="flex items-center justify-between mb-4">
            <div className="text-sm text-gray-600">
              –í—Ä–µ–º—è: <span className="font-medium">{formatTime(timer)}</span>
            </div>
            {currentQuestion.part === 2 && (
              <div className="text-sm text-gray-600">
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è: <span className="font-medium">01:00 - 02:00</span>
              </div>
            )}
          </div>
          
          <div className="flex flex-wrap gap-3">
            {!isRecording && !audioURL && (
              <button
                onClick={startRecording}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
              </button>
            )}
            
            {isRecording && (
              <button
                onClick={stopRecording}
                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              >
                ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
              </button>
            )}
            
            {audioURL && (
              <>
                <audio controls src={audioURL} className="w-full mb-3" />
                <div className="flex gap-3 w-full">
                  <button
                    onClick={() => {
                      setAudioBlob(null);
                      setAudioURL('');
                    }}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors"
                  >
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                  </button>
                  
                  <button
                    onClick={analyzeRecording}
                    className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                  >
                    üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
                  </button>
                </div>
              </>
            )}
          </div>
        </div>
      </div>
    );
  };

  const renderFeedback = () => {
    if (!feedback) return null;

    return (
      <div className="bg-gray-50 p-6 rounded-lg mt-6">
        <h3 className="text-xl font-semibold text-gray-900 mb-4">–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞</h3>
        
        {feedback.transcription && (
          <div className="mb-6 bg-white p-4 rounded-lg border border-gray-200">
            <div className="flex justify-between items-center mb-2">
              <h4 className="font-semibold text-gray-800">–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:</h4>
              {feedback.transcriptionSource && (
                <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                  {feedback.transcriptionSource}
                </span>
              )}
            </div>
            <p className="text-gray-700 italic">{feedback.transcription}</p>
          </div>
        )}
        
        <div className="mb-6">
          <h4 className="font-semibold text-gray-800 mb-2">–û–±—â–∏–π –±–∞–ª–ª:</h4>
          <div className="flex items-center">
            <div className="text-2xl font-bold text-blue-600">{feedback.score}</div>
            <div className="ml-2 text-gray-500">(–∏–∑ 9.0)</div>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <h4 className="font-semibold text-gray-800 mb-2">–ë–µ–≥–ª–æ—Å—Ç—å –∏ —Å–≤—è–∑–Ω–æ—Å—Ç—å</h4>
            <div className="flex items-center">
              <div className="text-xl font-bold text-blue-600">{feedback.criteria.fluency}</div>
              <div className="ml-2 text-gray-500">(–∏–∑ 9.0)</div>
            </div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <h4 className="font-semibold text-gray-800 mb-2">–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</h4>
            <div className="flex items-center">
              <div className="text-xl font-bold text-blue-600">{feedback.criteria.pronunciation}</div>
              <div className="ml-2 text-gray-500">(–∏–∑ 9.0)</div>
            </div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <h4 className="font-semibold text-gray-800 mb-2">–õ–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∑–∞–ø–∞—Å</h4>
            <div className="flex items-center">
              <div className="text-xl font-bold text-blue-600">{feedback.criteria.lexicalResource}</div>
              <div className="ml-2 text-gray-500">(–∏–∑ 9.0)</div>
            </div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <h4 className="font-semibold text-gray-800 mb-2">–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –∏ —Ç–æ—á–Ω–æ—Å—Ç—å</h4>
            <div className="flex items-center">
              <div className="text-xl font-bold text-blue-600">{feedback.criteria.grammar}</div>
              <div className="ml-2 text-gray-500">(–∏–∑ 9.0)</div>
            </div>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <div>
            <h4 className="font-semibold text-gray-800 mb-2">–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:</h4>
            <ul className="list-disc pl-6 text-gray-700 space-y-1">
              {feedback.feedback.positive.map((item, index) => (
                <li key={index}>{item}</li>
              ))}
            </ul>
          </div>
          <div>
            <h4 className="font-semibold text-gray-800 mb-2">–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:</h4>
            <ul className="list-disc pl-6 text-gray-700 space-y-1">
              {feedback.feedback.improvements.map((item, index) => (
                <li key={index}>{item}</li>
              ))}
            </ul>
          </div>
        </div>
        
        <div className="bg-blue-50 p-4 rounded-lg">
          <h4 className="font-semibold text-blue-800 mb-2">–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:</h4>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div className="bg-white p-3 rounded border border-blue-100">
              <p className="text-gray-600">–°–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É:</p>
              <p className="font-semibold text-blue-700">{feedback.detailedAnalysis.wordsPerMinute}</p>
            </div>
            <div className="bg-white p-3 rounded border border-blue-100">
              <p className="text-gray-600">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—É–∑:</p>
              <p className="font-semibold text-blue-700">{feedback.detailedAnalysis.pauseCount}</p>
            </div>
            <div className="bg-white p-3 rounded border border-blue-100">
              <p className="text-gray-600">–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:</p>
              <p className="font-semibold text-blue-700">{feedback.detailedAnalysis.repetitions}</p>
            </div>
          </div>
          
          {feedback.detailedAnalysis.incorrectPronunciations && feedback.detailedAnalysis.incorrectPronunciations.length > 0 && (
            <div className="mt-4">
              <h5 className="font-medium text-blue-800 mb-2">–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:</h5>
              <div className="bg-white p-3 rounded border border-blue-100">
                <table className="w-full text-sm">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left py-1">–°–ª–æ–≤–æ</th>
                      <th className="text-left py-1">–í–∞—à–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</th>
                      <th className="text-left py-1">–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</th>
                    </tr>
                  </thead>
                  <tbody>
                    {feedback.detailedAnalysis.incorrectPronunciations.map((item, index) => (
                      <tr key={index} className={index !== 0 ? "border-t" : ""}>
                        <td className="py-1 font-medium">{item.word}</td>
                        <td className="py-1">{item.yourPronunciation}</td>
                        <td className="py-1">{item.correctPronunciation}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}
        </div>
        
        <div className="mt-6">
          <h4 className="font-semibold text-gray-800 mb-2">–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</h4>
          <ul className="list-disc pl-6 text-gray-700 space-y-1">
            {feedback.nextSteps.map((item, index) => (
              <li key={index}>{item}</li>
            ))}
          </ul>
        </div>
      </div>
    );
  };

  return (
    <div className="flex min-h-screen bg-gray-50">
      {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
      <SpeakingSkillsSidebar activeLessonId={9} />

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="flex-1 flex flex-col">
        {/* –ú–æ–±–∏–ª—å–Ω—ã–π —Ö–µ–¥–µ—Ä */}
        <div className="lg:hidden bg-white shadow-sm border-b p-4">
          <div className="flex items-center justify-between">
            <Link href="/courses/speaking-skills" className="text-blue-600">‚Üê –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É</Link>
            <SignedIn>
              <UserButton afterSignOutUrl="/" />
            </SignedIn>
          </div>
        </div>

        <main className="flex-1 p-4 lg:p-8 max-w-4xl mx-auto">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–∞ */}
          <div className="mb-8">
            <div className="flex items-center mb-4">
              <span className="text-4xl mr-4">üéØ</span>
              <div>
                <h1 className="text-3xl font-bold text-gray-900">–£—Ä–æ–∫ 9: –ü—Ä–∞–∫—Ç–∏–∫–∞ IELTS Speaking</h1>
                <p className="text-gray-600">–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ ‚Ä¢ 45 –º–∏–Ω—É—Ç</p>
              </div>
            </div>
            
            {completed && (
              <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
                <div className="flex items-center">
                  <span className="text-green-500 mr-2">‚úÖ</span>
                  <span className="text-green-700 font-medium">–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!</span>
                </div>
              </div>
            )}
          </div>

          {/* –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ */}
          <div className="bg-white rounded-lg p-8 shadow-sm mb-8">
            <div className="prose max-w-none">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">–ü—Ä–∞–∫—Ç–∏–∫–∞ IELTS Speaking</h2>
              
              <p className="text-gray-700 leading-relaxed mb-6">
                –í —ç—Ç–æ–º —É—Ä–æ–∫–µ –º—ã —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–º—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω—É IELTS Speaking. –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤—Å–µ —Ç—Ä–∏ —á–∞—Å—Ç–∏ —ç–∫–∑–∞–º–µ–Ω–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤, –∞ —Ç–∞–∫–∂–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏.
              </p>

              <div className="bg-blue-50 p-6 rounded-lg mb-6">
                <h3 className="text-xl font-semibold text-blue-900 mb-4">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞:</h3>
                <ul className="list-disc pl-6 text-blue-800 space-y-2">
                  <li>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–∫–∑–∞–º–µ–Ω–∞ IELTS Speaking</li>
                  <li>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å –ò–ò</li>
                  <li>–°–æ–≤–µ—Ç—ã –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ç—Ä–µ—Å—Å–æ–º –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ</li>
                </ul>
              </div>

              <h3 className="text-xl font-semibold text-gray-900 mb-4">–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–∫–∑–∞–º–µ–Ω–∞ IELTS Speaking</h3>
              
              <div className="bg-gray-50 p-6 rounded-lg mb-6">
                <p className="text-gray-700 mb-3">–≠–∫–∑–∞–º–µ–Ω IELTS Speaking –¥–ª–∏—Ç—Å—è 11-14 –º–∏–Ω—É—Ç –∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä–µ—Ö —á–∞—Å—Ç–µ–π:</p>
                
                <div className="grid md:grid-cols-3 gap-4">
                  <div className="bg-blue-50 p-4 rounded-lg">
                    <h4 className="font-semibold text-blue-900 mb-2">–ß–∞—Å—Ç—å 1 (4-5 –º–∏–Ω—É—Ç)</h4>
                    <p className="text-blue-800 text-sm">–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–µ–±–µ, —Å–µ–º—å–µ, —Ä–∞–±–æ—Ç–µ, —É—á–µ–±–µ, –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∏ —Ç.–¥.</p>
                  </div>
                  <div className="bg-green-50 p-4 rounded-lg">
                    <h4 className="font-semibold text-green-900 mb-2">–ß–∞—Å—Ç—å 2 (3-4 –º–∏–Ω—É—Ç—ã)</h4>
                    <p className="text-green-800 text-sm">–ú–æ–Ω–æ–ª–æ–≥ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É. –£ –≤–∞—Å –±—É–¥–µ—Ç 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∏ 1-2 –º–∏–Ω—É—Ç—ã –Ω–∞ —Ä–µ—á—å.</p>
                  </div>
                  <div className="bg-purple-50 p-4 rounded-lg">
                    <h4 className="font-semibold text-purple-900 mb-2">–ß–∞—Å—Ç—å 3 (4-5 –º–∏–Ω—É—Ç)</h4>
                    <p className="text-purple-800 text-sm">–û–±—Å—É–∂–¥–µ–Ω–∏–µ –±–æ–ª–µ–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö —Ç–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–µ–º–æ–π –ß–∞—Å—Ç–∏ 2.</p>
                  </div>
                </div>
              </div>

              <h3 className="text-xl font-semibold text-gray-900 mb-4">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å –ò–ò</h3>
              
              <div className="bg-white border border-gray-200 rounded-lg p-6 mb-6">
                <div className="flex flex-wrap gap-4 mb-6">
                  <button
                    onClick={() => {
                      setActiveSection('part1');
                      fetchQuestion(1);
                    }}
                    className={`px-4 py-2 rounded-lg transition-colors ${
                      activeSection === 'part1'
                        ? 'bg-blue-600 text-white'
                        : 'bg-blue-50 text-blue-800 hover:bg-blue-100'
                    }`}
                  >
                    –ß–∞—Å—Ç—å 1: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ
                  </button>
                  
                  <button
                    onClick={() => {
                      setActiveSection('part2');
                      fetchQuestion(2);
                    }}
                    className={`px-4 py-2 rounded-lg transition-colors ${
                      activeSection === 'part2'
                        ? 'bg-green-600 text-white'
                        : 'bg-green-50 text-green-800 hover:bg-green-100'
                    }`}
                  >
                    –ß–∞—Å—Ç—å 2: –ú–æ–Ω–æ–ª–æ–≥
                  </button>
                  
                  <button
                    onClick={() => {
                      setActiveSection('part3');
                      fetchQuestion(3);
                    }}
                    className={`px-4 py-2 rounded-lg transition-colors ${
                      activeSection === 'part3'
                        ? 'bg-purple-600 text-white'
                        : 'bg-purple-50 text-purple-800 hover:bg-purple-100'
                    }`}
                  >
                    –ß–∞—Å—Ç—å 3: –û–±—Å—É–∂–¥–µ–Ω–∏–µ
                  </button>
                </div>
                
                {isLoading ? (
                  <div className="flex justify-center py-10">
                    <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
                  </div>
                ) : (
                  <>
                    {renderQuestionContent()}
                    {renderFeedback()}
                  </>
                )}
              </div>

              <h3 className="text-xl font-semibold text-gray-900 mb-4">–°–æ–≤–µ—Ç—ã –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ç—Ä–µ—Å—Å–æ–º –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ</h3>
              
              <div className="bg-orange-50 border border-orange-200 rounded-lg p-6">
                <h4 className="font-semibold text-orange-800 mb-2">üí° –ö–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –≤–æ–ª–Ω–µ–Ω–∏–µ–º:</h4>
                <ul className="list-disc pl-6 text-orange-700 space-y-2">
                  <li><strong>–ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∑–∞—Ä–∞–Ω–µ–µ</strong> ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å–Ω–∏–∂–∞–µ—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å</li>
                  <li><strong>–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å —Å –Ω–æ—Å–∏—Ç–µ–ª—è–º–∏ —è–∑—ã–∫–∞</strong> ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–≤—ã–∫–Ω—É—Ç—å –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä—É —Å –Ω–µ–∑–Ω–∞–∫–æ–º—ã–º–∏ –ª—é–¥—å–º–∏</li>
                  <li><strong>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –¥—ã—Ö–∞–Ω–∏—è</strong> ‚Äî —Å–¥–µ–ª–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤ –ø–µ—Ä–µ–¥ —ç–∫–∑–∞–º–µ–Ω–æ–º</li>
                  <li><strong>–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —É—Å–ø–µ—Ö</strong> ‚Äî –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, –∫–∞–∫ –≤—ã —É–≤–µ—Ä–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã</li>
                  <li><strong>–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ</strong> ‚Äî –µ–≥–æ –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–ø—É—Ç–∞—Ç—å –≤–∞—Å, –∞ –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏</li>
                  <li><strong>–ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –≤–æ–ø—Ä–æ—Å</strong> ‚Äî –≤–µ–∂–ª–∏–≤–æ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å</li>
                  <li><strong>–ï—Å–ª–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É</strong> ‚Äî –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–µ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å</li>
                </ul>
              </div>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞ */}
          <div className="text-center">
            {!completed ? (
              <button 
                onClick={handleCompleteLesson}
                disabled={isCompleting}
                className={`px-6 py-3 rounded-lg font-medium transition-all duration-300 ${
                  isCompleting 
                    ? 'bg-gray-400 text-white cursor-not-allowed' 
                    : 'bg-green-600 text-white hover:bg-green-700 hover:shadow-md'
                }`}
              >
                {isCompleting ? (
                  <span className="flex items-center">
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...
                  </span>
                ) : (
                  '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π'
                )}
              </button>
            ) : (
              <div className="space-y-4">
                <p className="text-green-600 font-semibold">–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ</p>
                <Link 
                  href="/courses/speaking-skills"
                  className="inline-block bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 hover:shadow-md transition-all duration-300"
                >
                  –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å—É
                </Link>
              </div>
            )}
          </div>

          {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ */}
          {showCompletion && (
            <div className="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50">
              <div className="flex items-center">
                <span className="mr-2">üéâ</span>
                –£—Ä–æ–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π!
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
} 